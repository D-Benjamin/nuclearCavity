/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  5                                     |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default Euler;
}

gradSchemes
{
    default none;
    grad(U)             Gauss linear;
    grad(p_rgh)         Gauss linear;
    grad((rho*rhok))    Gauss linear;
    grad(h)             Gauss linear;
}

divSchemes
{
    default none;
    div(phi,U)          Gauss upwind;
    div(phi,K)          Gauss linear;
    div(phi,h)          Gauss upwind;
    div(phi,k)          Gauss upwind;
    div(phi,epsilon)    Gauss upwind;
    div(phi,R)          Gauss upwind;
    div(R)              Gauss linear;
    div((muEff*dev2(T(grad(U)))))       Gauss linear;
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
}

laplacianSchemes
{
    default none;
    laplacian(muEff,U)              Gauss linear orthogonal;
    laplacian(rhorAUf,p_rgh)        Gauss linear orthogonal;
    laplacian(alphaEff,h)           Gauss linear orthogonal;
    laplacian(DkEff,k)              Gauss linear orthogonal;
    laplacian(DepsilonEff,epsilon)  Gauss linear orthogonal;
    laplacian(DREff,R)              Gauss linear orthogonal;
    laplacian((rho*nuEff),U)        Gauss linear orthogonal;
    laplacian(thermo:alpha,h)       Gauss linear orthogonal;
    laplacian(alphahe,h)            Gauss linear orthogonal;
}

interpolationSchemes
{
    default none;
    interpolate(porosity)               linear;
    interpolate(((porosity*rho)*rAU))   linear;
    interpolate(((porousMediumModel<porosity*rho)*rAU)) linear;
    dotInterpolate(S,(rho_0*U_0))       linear;
    interpolate((rho*HbyA))             linear;
    interpolate(rho_0)                  linear;
    flux((rho*HbyA))                    linear;
}

snGradSchemes
{
    default none;
    snGrad(p_rgh)       orthogonal;
    snGrad((rho*rhok))  orthogonal;
}

fluxRequired
{
    default false;
    p_rgh;
}

// ************************************************************************* //
